/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.idm.xtext.serializer;

import com.google.inject.Inject;
import fr.unice.polytech.idm.xtext.services.SmartHomeDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import smartHome.AnalogSensorType;
import smartHome.BooleanCondition;
import smartHome.BooleanSensor;
import smartHome.BooleanSensorType;
import smartHome.Duration;
import smartHome.Event;
import smartHome.IntegerCondition;
import smartHome.IntegerSensor;
import smartHome.Location;
import smartHome.Rule;
import smartHome.SmartHome;
import smartHome.SmartHomePackage;

@SuppressWarnings("all")
public class SmartHomeDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SmartHomeDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmartHomePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmartHomePackage.ANALOG_SENSOR_TYPE:
				sequence_AnalogSensorType(context, (AnalogSensorType) semanticObject); 
				return; 
			case SmartHomePackage.BOOLEAN_CONDITION:
				sequence_BooleanCondition(context, (BooleanCondition) semanticObject); 
				return; 
			case SmartHomePackage.BOOLEAN_SENSOR:
				sequence_BooleanSensor(context, (BooleanSensor) semanticObject); 
				return; 
			case SmartHomePackage.BOOLEAN_SENSOR_TYPE:
				sequence_BooleanSensorType(context, (BooleanSensorType) semanticObject); 
				return; 
			case SmartHomePackage.DURATION:
				sequence_Duration(context, (Duration) semanticObject); 
				return; 
			case SmartHomePackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case SmartHomePackage.INTEGER_CONDITION:
				sequence_IntegerCondition(context, (IntegerCondition) semanticObject); 
				return; 
			case SmartHomePackage.INTEGER_SENSOR:
				sequence_IntegerSensor(context, (IntegerSensor) semanticObject); 
				return; 
			case SmartHomePackage.LOCATION:
				sequence_Location(context, (Location) semanticObject); 
				return; 
			case SmartHomePackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case SmartHomePackage.SMART_HOME:
				sequence_SmartHome(context, (SmartHome) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SensorType returns AnalogSensorType
	 *     AnalogSensorType returns AnalogSensorType
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_AnalogSensorType(ISerializationContext context, AnalogSensorType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.SENSOR_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.SENSOR_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnalogSensorTypeAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns BooleanCondition
	 *     BooleanCondition returns BooleanCondition
	 *
	 * Constraint:
	 *     (sensor=[BooleanSensor|EString] operator=BooleanOperator operand=EBoolean)
	 */
	protected void sequence_BooleanCondition(ISerializationContext context, BooleanCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.BOOLEAN_CONDITION__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.BOOLEAN_CONDITION__SENSOR));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.BOOLEAN_CONDITION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.BOOLEAN_CONDITION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.BOOLEAN_CONDITION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.BOOLEAN_CONDITION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanConditionAccess().getSensorBooleanSensorEStringParserRuleCall_0_0_1(), semanticObject.eGet(SmartHomePackage.Literals.BOOLEAN_CONDITION__SENSOR, false));
		feeder.accept(grammarAccess.getBooleanConditionAccess().getOperatorBooleanOperatorEnumRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getBooleanConditionAccess().getOperandEBooleanParserRuleCall_2_0(), semanticObject.isOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SensorType returns BooleanSensorType
	 *     BooleanSensorType returns BooleanSensorType
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_BooleanSensorType(ISerializationContext context, BooleanSensorType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.SENSOR_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.SENSOR_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanSensorTypeAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns BooleanSensor
	 *     BooleanSensor returns BooleanSensor
	 *
	 * Constraint:
	 *     (name=EString sensorType=[BooleanSensorType|EString] dataFile=EString)
	 */
	protected void sequence_BooleanSensor(ISerializationContext context, BooleanSensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.SENSOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.SENSOR__NAME));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.SENSOR__SENSOR_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.SENSOR__SENSOR_TYPE));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.SENSOR__DATA_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.SENSOR__DATA_FILE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanSensorAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBooleanSensorAccess().getSensorTypeBooleanSensorTypeEStringParserRuleCall_2_0_1(), semanticObject.eGet(SmartHomePackage.Literals.SENSOR__SENSOR_TYPE, false));
		feeder.accept(grammarAccess.getBooleanSensorAccess().getDataFileEStringParserRuleCall_4_0(), semanticObject.getDataFile());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Duration returns Duration
	 *
	 * Constraint:
	 *     (value=EInt unit=DurationUnit)
	 */
	protected void sequence_Duration(ISerializationContext context, Duration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.DURATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.DURATION__VALUE));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.DURATION__UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.DURATION__UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDurationAccess().getValueEIntParserRuleCall_0_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getDurationAccess().getUnitDurationUnitEnumRuleCall_1_0(), semanticObject.getUnit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     description=EString
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.EVENT__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.EVENT__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getDescriptionEStringParserRuleCall_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns IntegerCondition
	 *     IntegerCondition returns IntegerCondition
	 *
	 * Constraint:
	 *     (sensor=[IntegerSensor|EString] operator=IntegerOperator operand=EInt)
	 */
	protected void sequence_IntegerCondition(ISerializationContext context, IntegerCondition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.INTEGER_CONDITION__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.INTEGER_CONDITION__SENSOR));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.INTEGER_CONDITION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.INTEGER_CONDITION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.INTEGER_CONDITION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.INTEGER_CONDITION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerConditionAccess().getSensorIntegerSensorEStringParserRuleCall_0_0_1(), semanticObject.eGet(SmartHomePackage.Literals.INTEGER_CONDITION__SENSOR, false));
		feeder.accept(grammarAccess.getIntegerConditionAccess().getOperatorIntegerOperatorEnumRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getIntegerConditionAccess().getOperandEIntParserRuleCall_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Sensor returns IntegerSensor
	 *     IntegerSensor returns IntegerSensor
	 *
	 * Constraint:
	 *     (name=EString sensorType=[AnalogSensorType|EString] dataFile=EString)
	 */
	protected void sequence_IntegerSensor(ISerializationContext context, IntegerSensor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.SENSOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.SENSOR__NAME));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.SENSOR__SENSOR_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.SENSOR__SENSOR_TYPE));
			if (transientValues.isValueTransient(semanticObject, SmartHomePackage.Literals.SENSOR__DATA_FILE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmartHomePackage.Literals.SENSOR__DATA_FILE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerSensorAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getIntegerSensorAccess().getSensorTypeAnalogSensorTypeEStringParserRuleCall_2_0_1(), semanticObject.eGet(SmartHomePackage.Literals.SENSOR__SENSOR_TYPE, false));
		feeder.accept(grammarAccess.getIntegerSensorAccess().getDataFileEStringParserRuleCall_4_0(), semanticObject.getDataFile());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Location returns Location
	 *
	 * Constraint:
	 *     (name=EString (sensors+=Sensor sensors+=Sensor*)?)
	 */
	protected void sequence_Location(ISerializationContext context, Location semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (conditions+=Condition conditions+=Condition* duration=Duration event=Event)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SmartHome returns SmartHome
	 *
	 * Constraint:
	 *     (
	 *         sensorTypes+=SensorType 
	 *         sensorTypes+=SensorType* 
	 *         locations+=Location 
	 *         locations+=Location* 
	 *         rules+=Rule 
	 *         rules+=Rule*
	 *     )
	 */
	protected void sequence_SmartHome(ISerializationContext context, SmartHome semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
