/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.idm.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmartHomeDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SmartHomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.SmartHome");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSmartHomeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSensorTypesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSensorTypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSensorTypesSensorTypeParserRuleCall_4_0 = (RuleCall)cSensorTypesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSensorTypesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSensorTypesSensorTypeParserRuleCall_5_1_0 = (RuleCall)cSensorTypesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cLocationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLocationsLocationParserRuleCall_7_0 = (RuleCall)cLocationsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cLocationsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cLocationsLocationParserRuleCall_8_1_0 = (RuleCall)cLocationsAssignment_8_1.eContents().get(0);
		private final Keyword cRulesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cRulesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cRulesRuleParserRuleCall_11_0 = (RuleCall)cRulesAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cRulesAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_12_1_0 = (RuleCall)cRulesAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//SmartHome:
		//	'SmartHome'
		//	'{'
		//	'sensorTypes' '{' sensorTypes+=SensorType ("," sensorTypes+=SensorType)* '}'
		//	locations+=Location ("," locations+=Location)*
		//	'rules' '{' rules+=Rule ("," rules+=Rule)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SmartHome' '{' 'sensorTypes' '{' sensorTypes+=SensorType ("," sensorTypes+=SensorType)* '}' locations+=Location (","
		//locations+=Location)* 'rules' '{' rules+=Rule ("," rules+=Rule)* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'SmartHome'
		public Keyword getSmartHomeKeyword_0() { return cSmartHomeKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'sensorTypes'
		public Keyword getSensorTypesKeyword_2() { return cSensorTypesKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//sensorTypes+=SensorType
		public Assignment getSensorTypesAssignment_4() { return cSensorTypesAssignment_4; }
		
		//SensorType
		public RuleCall getSensorTypesSensorTypeParserRuleCall_4_0() { return cSensorTypesSensorTypeParserRuleCall_4_0; }
		
		//("," sensorTypes+=SensorType)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//sensorTypes+=SensorType
		public Assignment getSensorTypesAssignment_5_1() { return cSensorTypesAssignment_5_1; }
		
		//SensorType
		public RuleCall getSensorTypesSensorTypeParserRuleCall_5_1_0() { return cSensorTypesSensorTypeParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//locations+=Location
		public Assignment getLocationsAssignment_7() { return cLocationsAssignment_7; }
		
		//Location
		public RuleCall getLocationsLocationParserRuleCall_7_0() { return cLocationsLocationParserRuleCall_7_0; }
		
		//("," locations+=Location)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//locations+=Location
		public Assignment getLocationsAssignment_8_1() { return cLocationsAssignment_8_1; }
		
		//Location
		public RuleCall getLocationsLocationParserRuleCall_8_1_0() { return cLocationsLocationParserRuleCall_8_1_0; }
		
		//'rules'
		public Keyword getRulesKeyword_9() { return cRulesKeyword_9; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_11() { return cRulesAssignment_11; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_11_0() { return cRulesRuleParserRuleCall_11_0; }
		
		//("," rules+=Rule)*
		public Group getGroup_12() { return cGroup_12; }
		
		//","
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_12_1() { return cRulesAssignment_12_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_12_1_0() { return cRulesRuleParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.Location");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLocationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSensorsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSensorsSensorParserRuleCall_4_0_0 = (RuleCall)cSensorsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSensorsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cSensorsSensorParserRuleCall_4_1_1_0 = (RuleCall)cSensorsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Location:
		//	{Location}
		//	'Location'
		//	name=EString
		//	'{' (sensors+=Sensor ("," sensors+=Sensor)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Location} 'Location' name=EString '{' (sensors+=Sensor ("," sensors+=Sensor)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Location}
		public Action getLocationAction_0() { return cLocationAction_0; }
		
		//'Location'
		public Keyword getLocationKeyword_1() { return cLocationKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(sensors+=Sensor ("," sensors+=Sensor)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//sensors+=Sensor
		public Assignment getSensorsAssignment_4_0() { return cSensorsAssignment_4_0; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_4_0_0() { return cSensorsSensorParserRuleCall_4_0_0; }
		
		//("," sensors+=Sensor)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//sensors+=Sensor
		public Assignment getSensorsAssignment_4_1_1() { return cSensorsAssignment_4_1_1; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_4_1_1_0() { return cSensorsSensorParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SensorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.SensorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnalogSensorTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanSensorTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SensorType:
		//	AnalogSensorType | BooleanSensorType;
		@Override public ParserRule getRule() { return rule; }
		
		//AnalogSensorType | BooleanSensorType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AnalogSensorType
		public RuleCall getAnalogSensorTypeParserRuleCall_0() { return cAnalogSensorTypeParserRuleCall_0; }
		
		//BooleanSensorType
		public RuleCall getBooleanSensorTypeParserRuleCall_1() { return cBooleanSensorTypeParserRuleCall_1; }
	}
	public class AnalogSensorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.AnalogSensorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AnalogSensorType:
		//	"analog" name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//"analog" name=EString
		public Group getGroup() { return cGroup; }
		
		//"analog"
		public Keyword getAnalogKeyword_0() { return cAnalogKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class BooleanSensorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.BooleanSensorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//BooleanSensorType:
		//	"boolean" name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//"boolean" name=EString
		public Group getGroup() { return cGroup; }
		
		//"boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Sensor:
		//	IntegerSensor | BooleanSensor;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerSensor | BooleanSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerSensor
		public RuleCall getIntegerSensorParserRuleCall_0() { return cIntegerSensorParserRuleCall_0; }
		
		//BooleanSensor
		public RuleCall getBooleanSensorParserRuleCall_1() { return cBooleanSensorParserRuleCall_1; }
	}
	public class IntegerSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.IntegerSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntegerSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSensorTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSensorTypeAnalogSensorTypeCrossReference_2_0 = (CrossReference)cSensorTypeAssignment_2.eContents().get(0);
		private final RuleCall cSensorTypeAnalogSensorTypeEStringParserRuleCall_2_0_1 = (RuleCall)cSensorTypeAnalogSensorTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataFileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataFileEStringParserRuleCall_4_0 = (RuleCall)cDataFileAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IntegerSensor:
		//	'IntegerSensor' name=EString sensorType=[AnalogSensorType|EString] '(' dataFile=EString ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'IntegerSensor' name=EString sensorType=[AnalogSensorType|EString] '(' dataFile=EString ')'
		public Group getGroup() { return cGroup; }
		
		//'IntegerSensor'
		public Keyword getIntegerSensorKeyword_0() { return cIntegerSensorKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//sensorType=[AnalogSensorType|EString]
		public Assignment getSensorTypeAssignment_2() { return cSensorTypeAssignment_2; }
		
		//[AnalogSensorType|EString]
		public CrossReference getSensorTypeAnalogSensorTypeCrossReference_2_0() { return cSensorTypeAnalogSensorTypeCrossReference_2_0; }
		
		//EString
		public RuleCall getSensorTypeAnalogSensorTypeEStringParserRuleCall_2_0_1() { return cSensorTypeAnalogSensorTypeEStringParserRuleCall_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//dataFile=EString
		public Assignment getDataFileAssignment_4() { return cDataFileAssignment_4; }
		
		//EString
		public RuleCall getDataFileEStringParserRuleCall_4_0() { return cDataFileEStringParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class BooleanSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.BooleanSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBooleanSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSensorTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSensorTypeBooleanSensorTypeCrossReference_2_0 = (CrossReference)cSensorTypeAssignment_2.eContents().get(0);
		private final RuleCall cSensorTypeBooleanSensorTypeEStringParserRuleCall_2_0_1 = (RuleCall)cSensorTypeBooleanSensorTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataFileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataFileEStringParserRuleCall_4_0 = (RuleCall)cDataFileAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BooleanSensor:
		//	'BooleanSensor' name=EString sensorType=[BooleanSensorType|EString] '(' dataFile=EString ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'BooleanSensor' name=EString sensorType=[BooleanSensorType|EString] '(' dataFile=EString ')'
		public Group getGroup() { return cGroup; }
		
		//'BooleanSensor'
		public Keyword getBooleanSensorKeyword_0() { return cBooleanSensorKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//sensorType=[BooleanSensorType|EString]
		public Assignment getSensorTypeAssignment_2() { return cSensorTypeAssignment_2; }
		
		//[BooleanSensorType|EString]
		public CrossReference getSensorTypeBooleanSensorTypeCrossReference_2_0() { return cSensorTypeBooleanSensorTypeCrossReference_2_0; }
		
		//EString
		public RuleCall getSensorTypeBooleanSensorTypeEStringParserRuleCall_2_0_1() { return cSensorTypeBooleanSensorTypeEStringParserRuleCall_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//dataFile=EString
		public Assignment getDataFileAssignment_4() { return cDataFileAssignment_4; }
		
		//EString
		public RuleCall getDataFileEStringParserRuleCall_4_0() { return cDataFileEStringParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_1_0 = (RuleCall)cConditionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_2_1_0 = (RuleCall)cConditionsAssignment_2_1.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDurationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDurationDurationParserRuleCall_4_0 = (RuleCall)cDurationAssignment_4.eContents().get(0);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEventAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEventEventParserRuleCall_6_0 = (RuleCall)cEventAssignment_6.eContents().get(0);
		
		//Rule:
		//	'if' conditions+=Condition ('and' conditions+=Condition)* 'for' duration=Duration 'then' event=Event;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' conditions+=Condition ('and' conditions+=Condition)* 'for' duration=Duration 'then' event=Event
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_1() { return cConditionsAssignment_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_1_0() { return cConditionsConditionParserRuleCall_1_0; }
		
		//('and' conditions+=Condition)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'and'
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_2_1() { return cConditionsAssignment_2_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_1_0() { return cConditionsConditionParserRuleCall_2_1_0; }
		
		//'for'
		public Keyword getForKeyword_3() { return cForKeyword_3; }
		
		//duration=Duration
		public Assignment getDurationAssignment_4() { return cDurationAssignment_4; }
		
		//Duration
		public RuleCall getDurationDurationParserRuleCall_4_0() { return cDurationDurationParserRuleCall_4_0; }
		
		//'then'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
		
		//event=Event
		public Assignment getEventAssignment_6() { return cEventAssignment_6; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_6_0() { return cEventEventParserRuleCall_6_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//	IntegerCondition | BooleanCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerCondition | BooleanCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerCondition
		public RuleCall getIntegerConditionParserRuleCall_0() { return cIntegerConditionParserRuleCall_0; }
		
		//BooleanCondition
		public RuleCall getBooleanConditionParserRuleCall_1() { return cBooleanConditionParserRuleCall_1; }
	}
	public class IntegerConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.IntegerCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSensorIntegerSensorCrossReference_0_0 = (CrossReference)cSensorAssignment_0.eContents().get(0);
		private final RuleCall cSensorIntegerSensorEStringParserRuleCall_0_0_1 = (RuleCall)cSensorIntegerSensorCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorIntegerOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandEIntParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		
		//IntegerCondition:
		//	sensor=[IntegerSensor|EString] operator=IntegerOperator operand=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=[IntegerSensor|EString] operator=IntegerOperator operand=EInt
		public Group getGroup() { return cGroup; }
		
		//sensor=[IntegerSensor|EString]
		public Assignment getSensorAssignment_0() { return cSensorAssignment_0; }
		
		//[IntegerSensor|EString]
		public CrossReference getSensorIntegerSensorCrossReference_0_0() { return cSensorIntegerSensorCrossReference_0_0; }
		
		//EString
		public RuleCall getSensorIntegerSensorEStringParserRuleCall_0_0_1() { return cSensorIntegerSensorEStringParserRuleCall_0_0_1; }
		
		//operator=IntegerOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//IntegerOperator
		public RuleCall getOperatorIntegerOperatorEnumRuleCall_1_0() { return cOperatorIntegerOperatorEnumRuleCall_1_0; }
		
		//operand=EInt
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//EInt
		public RuleCall getOperandEIntParserRuleCall_2_0() { return cOperandEIntParserRuleCall_2_0; }
	}
	public class BooleanConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.BooleanCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSensorBooleanSensorCrossReference_0_0 = (CrossReference)cSensorAssignment_0.eContents().get(0);
		private final RuleCall cSensorBooleanSensorEStringParserRuleCall_0_0_1 = (RuleCall)cSensorBooleanSensorCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorBooleanOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandEBooleanParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		
		//BooleanCondition:
		//	sensor=[BooleanSensor|EString] operator=BooleanOperator operand=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=[BooleanSensor|EString] operator=BooleanOperator operand=EBoolean
		public Group getGroup() { return cGroup; }
		
		//sensor=[BooleanSensor|EString]
		public Assignment getSensorAssignment_0() { return cSensorAssignment_0; }
		
		//[BooleanSensor|EString]
		public CrossReference getSensorBooleanSensorCrossReference_0_0() { return cSensorBooleanSensorCrossReference_0_0; }
		
		//EString
		public RuleCall getSensorBooleanSensorEStringParserRuleCall_0_0_1() { return cSensorBooleanSensorEStringParserRuleCall_0_0_1; }
		
		//operator=BooleanOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//BooleanOperator
		public RuleCall getOperatorBooleanOperatorEnumRuleCall_1_0() { return cOperatorBooleanOperatorEnumRuleCall_1_0; }
		
		//operand=EBoolean
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }
		
		//EBoolean
		public RuleCall getOperandEBooleanParserRuleCall_2_0() { return cOperandEBooleanParserRuleCall_2_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt ecore::EInt:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class DurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.Duration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueEIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitDurationUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//Duration:
		//	value=EInt unit=DurationUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt unit=DurationUnit
		public Group getGroup() { return cGroup; }
		
		//value=EInt
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0_0() { return cValueEIntParserRuleCall_0_0; }
		
		//unit=DurationUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }
		
		//DurationUnit
		public RuleCall getUnitDurationUnitEnumRuleCall_1_0() { return cUnitDurationUnitEnumRuleCall_1_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.Event");
		private final Assignment cDescriptionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_0 = (RuleCall)cDescriptionAssignment.eContents().get(0);
		
		//Event:
		//	description=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//description=EString
		public Assignment getDescriptionAssignment() { return cDescriptionAssignment; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_0() { return cDescriptionEStringParserRuleCall_0; }
	}
	
	public class IntegerOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.IntegerOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSEqualsSignKeyword_0_0 = (Keyword)cEQUALSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINFERIOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINFERIORLessThanSignKeyword_1_0 = (Keyword)cINFERIOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSUPERIOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSUPERIORGreaterThanSignKeyword_2_0 = (Keyword)cSUPERIOREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum IntegerOperator:
		//	EQUALS='=' | INFERIOR='<' | SUPERIOR='>';
		public EnumRule getRule() { return rule; }
		
		//EQUALS='=' | INFERIOR='<' | SUPERIOR='>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUALS='='
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_0() { return cEQUALSEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALSEqualsSignKeyword_0_0() { return cEQUALSEqualsSignKeyword_0_0; }
		
		//INFERIOR='<'
		public EnumLiteralDeclaration getINFERIOREnumLiteralDeclaration_1() { return cINFERIOREnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getINFERIORLessThanSignKeyword_1_0() { return cINFERIORLessThanSignKeyword_1_0; }
		
		//SUPERIOR='>'
		public EnumLiteralDeclaration getSUPERIOREnumLiteralDeclaration_2() { return cSUPERIOREnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getSUPERIORGreaterThanSignKeyword_2_0() { return cSUPERIORGreaterThanSignKeyword_2_0; }
	}
	public class BooleanOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.BooleanOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cISEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cISIsKeyword_0_0 = (Keyword)cISEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIS_NOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIS_NOTIsnotKeyword_1_0 = (Keyword)cIS_NOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanOperator:
		//	IS="is" | IS_NOT="isnot";
		public EnumRule getRule() { return rule; }
		
		//IS="is" | IS_NOT="isnot"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IS="is"
		public EnumLiteralDeclaration getISEnumLiteralDeclaration_0() { return cISEnumLiteralDeclaration_0; }
		
		//"is"
		public Keyword getISIsKeyword_0_0() { return cISIsKeyword_0_0; }
		
		//IS_NOT="isnot"
		public EnumLiteralDeclaration getIS_NOTEnumLiteralDeclaration_1() { return cIS_NOTEnumLiteralDeclaration_1; }
		
		//"isnot"
		public Keyword getIS_NOTIsnotKeyword_1_0() { return cIS_NOTIsnotKeyword_1_0; }
	}
	public class DurationUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.idm.xtext.SmartHomeDSL.DurationUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINUTEMinKeyword_0_0 = (Keyword)cMINUTEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSECONDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSECONDSKeyword_1_0 = (Keyword)cSECONDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DurationUnit:
		//	MINUTE='min' | SECOND='s';
		public EnumRule getRule() { return rule; }
		
		//MINUTE='min' | SECOND='s'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MINUTE='min'
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_0() { return cMINUTEEnumLiteralDeclaration_0; }
		
		//'min'
		public Keyword getMINUTEMinKeyword_0_0() { return cMINUTEMinKeyword_0_0; }
		
		//SECOND='s'
		public EnumLiteralDeclaration getSECONDEnumLiteralDeclaration_1() { return cSECONDEnumLiteralDeclaration_1; }
		
		//'s'
		public Keyword getSECONDSKeyword_1_0() { return cSECONDSKeyword_1_0; }
	}
	
	private final SmartHomeElements pSmartHome;
	private final LocationElements pLocation;
	private final SensorTypeElements pSensorType;
	private final AnalogSensorTypeElements pAnalogSensorType;
	private final BooleanSensorTypeElements pBooleanSensorType;
	private final EStringElements pEString;
	private final SensorElements pSensor;
	private final IntegerSensorElements pIntegerSensor;
	private final BooleanSensorElements pBooleanSensor;
	private final RuleElements pRule;
	private final ConditionElements pCondition;
	private final IntegerConditionElements pIntegerCondition;
	private final BooleanConditionElements pBooleanCondition;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	private final IntegerOperatorElements eIntegerOperator;
	private final BooleanOperatorElements eBooleanOperator;
	private final DurationUnitElements eDurationUnit;
	private final DurationElements pDuration;
	private final EventElements pEvent;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmartHomeDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSmartHome = new SmartHomeElements();
		this.pLocation = new LocationElements();
		this.pSensorType = new SensorTypeElements();
		this.pAnalogSensorType = new AnalogSensorTypeElements();
		this.pBooleanSensorType = new BooleanSensorTypeElements();
		this.pEString = new EStringElements();
		this.pSensor = new SensorElements();
		this.pIntegerSensor = new IntegerSensorElements();
		this.pBooleanSensor = new BooleanSensorElements();
		this.pRule = new RuleElements();
		this.pCondition = new ConditionElements();
		this.pIntegerCondition = new IntegerConditionElements();
		this.pBooleanCondition = new BooleanConditionElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
		this.eIntegerOperator = new IntegerOperatorElements();
		this.eBooleanOperator = new BooleanOperatorElements();
		this.eDurationUnit = new DurationUnitElements();
		this.pDuration = new DurationElements();
		this.pEvent = new EventElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.unice.polytech.idm.xtext.SmartHomeDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SmartHome:
	//	'SmartHome'
	//	'{'
	//	'sensorTypes' '{' sensorTypes+=SensorType ("," sensorTypes+=SensorType)* '}'
	//	locations+=Location ("," locations+=Location)*
	//	'rules' '{' rules+=Rule ("," rules+=Rule)* '}'
	//	'}';
	public SmartHomeElements getSmartHomeAccess() {
		return pSmartHome;
	}
	
	public ParserRule getSmartHomeRule() {
		return getSmartHomeAccess().getRule();
	}
	
	//Location:
	//	{Location}
	//	'Location'
	//	name=EString
	//	'{' (sensors+=Sensor ("," sensors+=Sensor)*)?
	//	'}';
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}
	
	//SensorType:
	//	AnalogSensorType | BooleanSensorType;
	public SensorTypeElements getSensorTypeAccess() {
		return pSensorType;
	}
	
	public ParserRule getSensorTypeRule() {
		return getSensorTypeAccess().getRule();
	}
	
	//AnalogSensorType:
	//	"analog" name=EString;
	public AnalogSensorTypeElements getAnalogSensorTypeAccess() {
		return pAnalogSensorType;
	}
	
	public ParserRule getAnalogSensorTypeRule() {
		return getAnalogSensorTypeAccess().getRule();
	}
	
	//BooleanSensorType:
	//	"boolean" name=EString;
	public BooleanSensorTypeElements getBooleanSensorTypeAccess() {
		return pBooleanSensorType;
	}
	
	public ParserRule getBooleanSensorTypeRule() {
		return getBooleanSensorTypeAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Sensor:
	//	IntegerSensor | BooleanSensor;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//IntegerSensor:
	//	'IntegerSensor' name=EString sensorType=[AnalogSensorType|EString] '(' dataFile=EString ')';
	public IntegerSensorElements getIntegerSensorAccess() {
		return pIntegerSensor;
	}
	
	public ParserRule getIntegerSensorRule() {
		return getIntegerSensorAccess().getRule();
	}
	
	//BooleanSensor:
	//	'BooleanSensor' name=EString sensorType=[BooleanSensorType|EString] '(' dataFile=EString ')';
	public BooleanSensorElements getBooleanSensorAccess() {
		return pBooleanSensor;
	}
	
	public ParserRule getBooleanSensorRule() {
		return getBooleanSensorAccess().getRule();
	}
	
	//Rule:
	//	'if' conditions+=Condition ('and' conditions+=Condition)* 'for' duration=Duration 'then' event=Event;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Condition:
	//	IntegerCondition | BooleanCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//IntegerCondition:
	//	sensor=[IntegerSensor|EString] operator=IntegerOperator operand=EInt;
	public IntegerConditionElements getIntegerConditionAccess() {
		return pIntegerCondition;
	}
	
	public ParserRule getIntegerConditionRule() {
		return getIntegerConditionAccess().getRule();
	}
	
	//BooleanCondition:
	//	sensor=[BooleanSensor|EString] operator=BooleanOperator operand=EBoolean;
	public BooleanConditionElements getBooleanConditionAccess() {
		return pBooleanCondition;
	}
	
	public ParserRule getBooleanConditionRule() {
		return getBooleanConditionAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//enum IntegerOperator:
	//	EQUALS='=' | INFERIOR='<' | SUPERIOR='>';
	public IntegerOperatorElements getIntegerOperatorAccess() {
		return eIntegerOperator;
	}
	
	public EnumRule getIntegerOperatorRule() {
		return getIntegerOperatorAccess().getRule();
	}
	
	//enum BooleanOperator:
	//	IS="is" | IS_NOT="isnot";
	public BooleanOperatorElements getBooleanOperatorAccess() {
		return eBooleanOperator;
	}
	
	public EnumRule getBooleanOperatorRule() {
		return getBooleanOperatorAccess().getRule();
	}
	
	//enum DurationUnit:
	//	MINUTE='min' | SECOND='s';
	public DurationUnitElements getDurationUnitAccess() {
		return eDurationUnit;
	}
	
	public EnumRule getDurationUnitRule() {
		return getDurationUnitAccess().getRule();
	}
	
	//Duration:
	//	value=EInt unit=DurationUnit;
	public DurationElements getDurationAccess() {
		return pDuration;
	}
	
	public ParserRule getDurationRule() {
		return getDurationAccess().getRule();
	}
	
	//Event:
	//	description=EString;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
