/**
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.idm.xtext.formatting2;

import com.google.inject.Inject;
import fr.unice.polytech.idm.xtext.services.SmartHomeDSLGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import smartHome.Location;
import smartHome.Sensor;
import smartHome.SensorType;
import smartHome.SmartHome;

@SuppressWarnings("all")
public class SmartHomeDSLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SmartHomeDSLGrammarAccess _smartHomeDSLGrammarAccess;
  
  protected void _format(final SmartHome smartHome, @Extension final IFormattableDocument document) {
    EList<SensorType> _sensorTypes = smartHome.getSensorTypes();
    for (final SensorType sensorType : _sensorTypes) {
      document.<SensorType>format(sensorType);
    }
    EList<Location> _locations = smartHome.getLocations();
    for (final Location location : _locations) {
      document.<Location>format(location);
    }
  }
  
  protected void _format(final Location location, @Extension final IFormattableDocument document) {
    EList<Sensor> _sensors = location.getSensors();
    for (final Sensor sensor : _sensors) {
      document.<Sensor>format(sensor);
    }
  }
  
  public void format(final Object location, final IFormattableDocument document) {
    if (location instanceof XtextResource) {
      _format((XtextResource)location, document);
      return;
    } else if (location instanceof Location) {
      _format((Location)location, document);
      return;
    } else if (location instanceof SmartHome) {
      _format((SmartHome)location, document);
      return;
    } else if (location instanceof EObject) {
      _format((EObject)location, document);
      return;
    } else if (location == null) {
      _format((Void)null, document);
      return;
    } else if (location != null) {
      _format(location, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(location, document).toString());
    }
  }
}
